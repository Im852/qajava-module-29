◊ Требование: 
Метод isTeenager() должен возвращать true, если в него передаётся значение, соответствующее возрасту тинейджеров — тех, кому от 13 до 19 лет.

◊ Ошибки в формулировке требования: 
1) Не указано, включаются ли граничные значения (13 и 19) в позитивный класс эквивалентности (т.е. при обработке выдаётся true). Будем считать, что включаются. 
2) Не указано, какое значение должно быть возвращено, если передаваемое значение не входит в указанный диапазон (13-19). 
По умолчанию считаем, что false.


◊ Группы проверок:
1) Позитивные тесты: проверки в диапазоне от 13 до 19 включительно
2) Негативные тесты : проверки в диапазоне от -1 до 118, исключая [13-19]

◊ Ошибки в реализации метода isTeenager(): 
▶1) Несоответствие требованиям: выдача false вместо true для значения в диапазоне от 13 до 19 лет 
 (Тест #5: ввод 19)

▶2) Несоответствие требованиям: выдача true вместо false для значения < 13 лет (в т.ч. и для отрицательного значения)
 (Тесты #6, #7 и #8: ввод -1, 0 и 12 соответственно)

▶3) Возможность ввода отрицательного значения для указания возраста
(Тест #6: ввод -1)

▶4) Возможность ввода значения, превышающего зафиксированный предельный возраст человека (логическая ошибка, к технической реализации метода не относится)
(Тест #12: ввод 69913012)


◊Вариант корректной реализации метода isTeenager (также закомментирован в файле Person.java): 

public class Person {

    public static boolean isTeenager(int age) throws Exception {
        boolean result;
        if ((age <= 19) && (age >= 13)) {
            result = true;
        } else if ((age >= 0 && age < 13) || (age > 19 && age <= 118)) {
            result = false;
        } else {
            throw new Exception("Введено неверное значение возраста, повторите ввод");
        }
        return result;
    }
}